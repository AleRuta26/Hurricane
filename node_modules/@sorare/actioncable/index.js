"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionCable = void 0;

var _ws = _interopRequireDefault(require("ws"));

var _string_decoder = require("string_decoder");

var _subscription = require("./subscription");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var MessageType;

(function (MessageType) {
  MessageType["Welcome"] = "welcome";
  MessageType["Ping"] = "ping";
  MessageType["Confirmation"] = "confirm_subscription";
  MessageType["Rejection"] = "reject_subscription";
  MessageType["Disconnect"] = "disconnect";
})(MessageType || (MessageType = {}));

var ActionCable = /*#__PURE__*/function () {
  function ActionCable(options) {
    _classCallCheck(this, ActionCable);

    // options
    this.url = options.url || 'wss://ws.sorare.com/cable';
    this.origin = options.origin;
    this.headers = options.headers || {}; // heartbeat state

    this.lastHeartbeatTimestamp = 0;
    this.heartbeatInterval = undefined; // web socket

    this.connection = undefined;
    this.subscriptions = {};
    this.connectionPromise = this.connect();
  }

  _createClass(ActionCable, [{
    key: "subscribe",
    value: function subscribe(query, callbacks) {
      var identifier = JSON.stringify({
        channel: 'GraphqlChannel',
        channelId: Math.random().toString(36).substring(2, 8) // temporary

      });

      if (this.subscriptions[identifier]) {
        throw new Error('Already subscribed to this event.');
      }

      this.subscriptions[identifier] = new _subscription.Subscription(query, identifier, this.connectionPromise, callbacks);
      return this.subscriptions[identifier];
    }
  }, {
    key: "connect",
    value: function connect() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var connection = new _ws.default(_this.url, undefined, {
          origin: _this.origin,
          headers: _this.headers
        });
        connection.on('error', function (err) {
          _this.disconnect(err);

          reject(err);
        });
        connection.on('close', function () {
          return _this.disconnect('closed');
        });
        connection.on('message', function (msg) {
          var decoder = new _string_decoder.StringDecoder('utf8');
          var data = JSON.parse(decoder.write(msg));

          _this.handleMessage(data);
        });
        connection.on('open', function () {
          _this.heartbeatInterval = setInterval(function () {
            return _this.checkHeartbeat();
          }, 10000);
          resolve(connection);
        });
        _this.connection = connection;
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect(err) {
      var _this2 = this;

      if (this.heartbeatInterval) {
        clearInterval(this.heartbeatInterval);
      }

      Object.entries(this.subscriptions).forEach(function (_ref) {
        var _subscription$callbac, _subscription$callbac2;

        var _ref2 = _slicedToArray(_ref, 2),
            query = _ref2[0],
            subscription = _ref2[1];

        (_subscription$callbac = (_subscription$callbac2 = subscription.callbacks).disconnected) === null || _subscription$callbac === void 0 ? void 0 : _subscription$callbac.call(_subscription$callbac2, err);
        delete _this2.subscriptions[query];
      });
    }
  }, {
    key: "handleMessage",
    value: function handleMessage(data) {
      var _sub$callbacks$connec, _sub$callbacks, _sub$callbacks$reject, _sub$callbacks2;

      var sub = this.subscriptions[data.identifier];
      var type = data.type;

      switch (type) {
        case MessageType.Welcome:
          break;

        case MessageType.Ping:
          this.lastHeartbeatTimestamp = +new Date();
          break;

        case MessageType.Confirmation:
          (_sub$callbacks$connec = (_sub$callbacks = sub.callbacks).connected) === null || _sub$callbacks$connec === void 0 ? void 0 : _sub$callbacks$connec.call(_sub$callbacks);
          break;

        case MessageType.Rejection:
          (_sub$callbacks$reject = (_sub$callbacks2 = sub.callbacks).rejected) === null || _sub$callbacks$reject === void 0 ? void 0 : _sub$callbacks$reject.call(_sub$callbacks2);
          break;

        case MessageType.Disconnect:
          this.disconnect(data.reason);
          break;

        default:
          sub.callbacks.received(data.message);
          break;
      }
    }
  }, {
    key: "checkHeartbeat",
    value: function checkHeartbeat() {
      if (!this.connection || !this.lastHeartbeatTimestamp) {
        return;
      }

      var isFlat = this.lastHeartbeatTimestamp + 10 * 1000 < +new Date();

      if (isFlat) {
        this.connection.close();
      }
    }
  }]);

  return ActionCable;
}();

exports.ActionCable = ActionCable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,